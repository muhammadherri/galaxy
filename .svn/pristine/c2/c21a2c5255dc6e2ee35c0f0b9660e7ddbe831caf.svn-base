<?php

namespace App\Http\Controllers\Admin;

use App\Http\Controllers\Controller;
use App\Http\Requests\MassDestroyTransactionTypeRequest;
use App\Http\Requests\StoreRequisitionRequest;
use App\Http\Requests\StoreRcvRequest;
use App\PurchaseOrder;
use App\PurchaseOrderDet;
use App\TrxStatuses;
use App\RcvHeader;
use App\RcvDetail;
use App\Grn;
use App\Onhand;
use App\PurchaseRequisition;
use App\RequisitionDetail;
use App\UomConversion;
use App\MaterialTxns;
use Gate;
use App\User;
use App\Vendor;
use App\HPCount;
use App\Helpers\Helper;
use Illuminate\Http\Request;
use Symfony\Component\HttpFoundation\Response;
use Illuminate\Support\Facades\DB;
use Barryvdh\DomPDF\Facade as PDF;

class ReceivesController extends Controller
{
    public function index()
    {
        abort_if(Gate::denies('order_edit'), Response::HTTP_FORBIDDEN, '403 Forbidden');
        $grn = RcvHeader::orderBy('id', 'DESC')->get('receipt_num');
        $vendor = Vendor::All();
        return view('admin.rcv.index', compact('vendor','grn'));
    }

    public function create()
    {
		Grn::create();
		$grn = Grn::latest('id')->first();
		$users = User::all();
		$orders = PurchaseOrderDet::where('line_status','=',2)->get();
		$order_head = PurchaseOrder::where('status','=',2)->get();
		$vendor = DB::table('bm_vendor_header')
             ->join('bm_po_header_all', 'bm_po_header_all.vendor_id', '=', 'bm_vendor_header.vendor_id')
             ->select('bm_po_header_all.vendor_id','bm_vendor_header.vendor_name')
             ->where('bm_po_header_all.status',2)
             ->groupBy('bm_po_header_all.vendor_id','bm_vendor_header.vendor_name')
             ->get();
		return view('admin.rcv.create',compact('users','orders','vendor','order_head','grn'));
    }

    public function store(StoreRcvRequest $request){
        $id = RcvHeader::latest('id')->first();
        $head =RcvHeader::findorNew($request->id);
        $head->shipment_header_id=str_pad($id->id+1, 6, "0", STR_PAD_LEFT);
        $head->vendor_id=$request->vendor_id;
        $head->organization_id=$request->organization_id;
        $head->receipt_num=$request->receipt_num;
        $head->currency_code=DB::table('bm_po_header_all')->where('segment1',$request->segment1)->first()->currency_code;
        $head->conversion_date=DB::table('bm_po_header_all')->where('segment1',$request->segment1)->first()->rate_date;
        $head->vendor_site_id=DB::table('bm_po_header_all')->where('segment1',$request->segment1)->first()->vendor_site_id;
        $head->ship_to_location_id=$request->ship_to_location;
        $head->bill_of_lading=$request->bill_of_lading;
        $head->freight_terms=$request->freight_terms;
        $head->transaction_type="RECEIVE";
        $head->receipt_source_code=$request->type_lookup_code;
        $head->packing_slip=$request->packing_slip;
        $head->waybill_airbill_num=$request->waybill_airbill_num;
        $head->comments=$request->comments;
        $head->attribute1=$request->attribute1;
        $head->invoice_status_code=0;
        $head->created_by=$request->created_by;
        $head->last_updated_by=$request->updated_by;
        $head->gl_date=$request->gl_date;
        $head->created_at=date('Y-m-d H:i:s');
        $head->updated_at=date('Y-m-d H:i:s');
        try {
        \DB::beginTransaction();
            $head->save();
            $checked_array=$request->line_number;
            $line_id=1;
            foreach ($request->check as $key => $value){
                if(in_array($request->check[$key],$checked_array)){
                    $uom_conversion = UomConversion::where('inventory_item_id', $request->inventory_item_id[$key])->first();
                    if ($uom_conversion){
                        if( $request->po_uom_code[$key]== $uom_conversion->interior_unit_code){
                            $base_uom = $uom_conversion->uom_code;
                            $base_qty = $request->purchase_quantity[$key] / $uom_conversion->conversion_rate;
                            $transfer_cost = $request->unit_price[$key] * $uom_conversion->conversion_rate;
                            // dd($transfer_cost);
                        }else{
                            $base_uom =  $request->po_uom_code[$key];
                            $base_qty = $request->purchase_quantity[$key];
                            $transfer_cost = $request->unit_price[$key];
                        }
                    }else{
                        $base_uom =  $request->po_uom_code[$key];
                        $base_qty = $request->purchase_quantity[$key];
                        $transfer_cost = $request->unit_price[$key];
                    }
                    $data = array(
                        'po_header_id'=>isset($request->po_header_id[$key])? $request->po_header_id[$key] :'',
							'po_line_location_id'=>isset($request->no_id[$key])? $request->no_id[$key] :'',
							'quantity_received'=>isset($request->purchase_quantity[$key])? $request->purchase_quantity[$key] :'',
							'quantity_delivered'=>0,
							'quantity_returned'=>0,
							'quantity_accepted'=>isset($request->purchase_quantity[$key])? $request->purchase_quantity[$key] :'',
							'quantity_rejected'=>0,
                            'secondary_quantity_received'=>$base_qty,
                            'secondary_uom_code'=>$base_uom,
                            'transfer_cost'=>$transfer_cost,
							'shipment_unit_price'=>isset($request->unit_price[$key])? $request->unit_price[$key] :'',
							'po_line_id'=>isset($request->po_line_id[$key])? $request->po_line_id[$key] :'',
							'uom_code'=>isset($request->po_uom_code[$key])? $request->po_uom_code[$key] :'',
							'item_description'=>isset($request->item_description[$key])? $request->item_description[$key] :'',
							'item_id'=>isset($request->inventory_item_id[$key])? $request->inventory_item_id[$key] :'',
							'tax_name'=>isset($request->tax_name[$key])? $request->tax_name[$key] :'',
							'shipment_header_id'=> $head->shipment_header_id,
							'shipment_line_id'=>$line_id,
							'to_subinventory'=>isset($request->subinventory[$key])? $request->subinventory[$key] :'1000',
							'created_at'=> date('Y-m-d H:i:s'),
							'updated_at'=> date('Y-m-d H:i:s'),
                    );
                    // dd($data);
                    /*check existing PO and update [po_quantity,quantity_receive] */
                    $po_lines=PurchaseOrderDet::find($data['po_line_location_id'], ['po_quantity', 'quantity_receive','line_status']);
                    $available_qty=$po_lines->po_quantity-$po_lines->quantity_receive;
                    if($data['quantity_received']<=$available_qty){
                     $new_rcv_qty=$po_lines->quantity_receive+$data['quantity_received'];
                     if($new_rcv_qty==$po_lines->po_quantity){
                            $line_status=12;
                        }else{
                            $line_status=$po_lines->line_status;
                         }
                    }else{
                        break;
                    }
                    /* end Check PO quantity and Received*/

                    RcvDetail::create($data);
                    PurchaseOrderDet::where("id", $data['po_line_location_id'])->update(["quantity_receive" => $new_rcv_qty,"line_status" => $line_status]);
                    /* Onhand Transaction*/
                    $onhand=Onhand::where(['inventory_item_id'=>$data['item_id'],'subinventory_code'=>$data['to_subinventory']])->first();
                    if(!$onhand){
                        $stock = array(
                            'inventory_item_id'=>$data['item_id'],
                            'subinventory_code'=>$data['to_subinventory'],
                            'primary_transaction_quantity'=>$base_qty,
                            'transaction_uom_code'=>$base_uom,
                            'created_by'=>$request->created_by,
                            'created_at'=> date('Y-m-d H:i:s'),
                            'updated_at'=> date('Y-m-d H:i:s'),
                        );
                        // dd($stock);
                    Onhand::create($stock);
                    }else{
                     $update_stock=	$onhand->primary_transaction_quantity+$base_qty;
                        $onhand=Onhand::where(['inventory_item_id'=>$data['item_id'],'subinventory_code'=>$data['to_subinventory']])->update(["primary_transaction_quantity"=>$update_stock]);
                    }
                    $trx = array(
                        'transaction_id'=>MaterialTxns::all()->count()+1,
                        'last_updated_by'=>$request->updated_by,
                        'created_by'=>$request->created_by,
                        'inventory_item_id'=>$data['item_id'],
                        'organization_id'=>'222',
                        'subinventory_code'=>$data['to_subinventory'],
                        'transaction_type_id'=>1,
                        'transaction_action_id'=>1,
                        'transaction_source_type_id'=>1,
                        'secondary_uom_code'=>$base_uom,
                        'secondary_transaction_quantity'=>$base_qty,
                        'transaction_source_name'=>"Purchase Order Receipt",
                        'transaction_quantity'=>$data['quantity_received'],
                        'transaction_cost'=>$data['transfer_cost'],
                        'transaction_uom'=>$data['uom_code'],
                        'primary_quantity'=>$data['quantity_received'],
                        'shipment_number'=>$request->attribute1,
                        'transaction_date'=>$request->gl_date,
                        'transaction_reference'=>$request->segment1,
                        'currency_code'=>DB::table('bm_po_header_all')->where('segment1',$request->segment1)->first()->currency_code,
                        'country_of_origin_code'=>DB::table('bm_party_site')->where('site_code',$head->vendor_site_id)->first()->country ?? DB::table('bm_vendor_header')->where('vendor_id',$request->vendor_id)->first()->country,
                        'receiving_document'=>isset($request->attribute1)? $request->attribute1 : $request->packing_slip,
                        'source_line_id'=>$data['po_line_id'],
                        'attribute_category'=>$request->receipt_num,
                    );
                    // dd($trx);
                    MaterialTxns::create($trx);

                }
                $line_id++;

                //update po status

            }
        \DB::commit();
        }catch (Throwable $e){
            \DB::rollback();
        }
          return redirect()->route('admin.rcv.index');
        }
    public function edit(PurchaseRequisition $purchaseRequisition)
    {
        abort_if(Gate::denies('order_edit'), Response::HTTP_FORBIDDEN, '403 Forbidden');
		$users =User::all();
		$status =TrxStatuses::whereIn('trx_code', [1, 2, 13])->get();
		$requisitionDetail=RequisitionDetail::where('header_id','=',$purchaseRequisition->id)->whereNull('deleted_at')->get();
	    return view('admin.purchaseRequisition.edit', compact('purchaseRequisition','users','requisitionDetail','status'));
    }

    public function update(Request $request)
    {
        $head =RcvHeader::find($request->id);
		$head->vendor_id=$request->vendor_id;
        $head->organization_id=isset($request->organization_id)? $request->organization_id :182;
        $head->receipt_num=$request->receipt_num;
        $head->currency_code=$request->currency_code;
        $head->gl_date=$request->rate_date;
        $head->ship_to_location_id=$request->ship_to_location;
        $head->bill_of_lading=$request->bill_of_lading;
        $head->freight_terms=$request->freight_terms;
        $head->receipt_source_code=$request->type_lookup_code;
        $head->packing_slip=$request->packing_slip;
        $head->waybill_airbill_num=$request->waybill_airbill_num;
        $head->comments=$request->comments;
        $head->created_by=$request->created_by;
        $head->last_updated_by=$request->updated_by;
        // $head->gl_date=$request->gl_date;
        $head->updated_at=date('Y-m-d H:i:s');
		try {
			\DB::beginTransaction();
            $head->save();
			foreach($request->inventory_item_id as $key =>$inventory_item_id){
				     $data = RcvDetail::find($request->shipment_line_id[$key]);
                     $data->quantity_received=$request->quantity [$key];
                     $data->secondary_quantity_received=$request->quantity[$key];
                     $data->secondary_uom_code=$request->pr_uom_code[$key];
                     $data->uom_code=$request->pr_uom_code[$key];
                     $data->item_description=$request->description_item[$key];
                     $data->item_id=$request->inventory_item_id[$key];
                     $data->shipment_unit_price=$request->shipment_unit_price[$key];
					 $data->to_subinventory=$request->subinventory[$key];
                     $data->transfer_percentage=$request->transfer_percentage[$key];
                     $data->attribute1=$request->attribute1[$key];
                     $data->attribute2=$request->attribute2[$key];
                     $data->tax_name=$request->tax_id;
                     $data->attribute_integer1=$request->attribute_integer1[$key];
                     $data->attribute_integer2=$request->attribute_integer2[$key];
                     $data->attribute_integer3=$request->attribute_integer3[$key];
                     $data->updated_at=date('Y-m-d H:i:s');
					 $data->save();

                     $po_data = PurchaseOrderDet::find($data->po_line_location_id);
                     if($po_data->unit_price == 0){
                         $price = $request->shipment_unit_price[$key];
                     }else{
                         $price = $po_data->unit_price;
                     }

                     $po_data->unit_price = $price;
                     $po_data->base_model_price = $request->shipment_unit_price[$key];
                     $po_data->po_quantity=$request->quantity [$key] ;
                     $po_data->base_qty=$request->quantity[$key];
                     $po_data->base_uom=$request->pr_uom_code[$key];
                     $po_data->po_uom_code=$request->pr_uom_code[$key];
                     $po_data->tax_name=$request->tax_id;
                     $po_data->item_description=$request->description_item[$key];
                     $po_data->inventory_item_id=$request->inventory_item_id[$key];
                     $po_data->updated_at=date('Y-m-d H:i:s');
                     $po_data->save();

                     $trx = MaterialTxns::where('attribute_category',$request->receipt_num)->first();
                     $trx->transaction_cost = $request->shipment_unit_price[$key];
                     $trx->updated_at=date('Y-m-d H:i:s');
                     $trx->save();

			}
			\DB::commit();
			}catch (Throwable $e){
				\DB::rollback();
			}
		return back()->with('success', 'Receive Data  is Updated');
	}

    public function show(Request $request)
    {
        $pdf = PDF::loadView('admin.rcv.product-label', compact('request'));
       // $pdf->setPaper('a4', 'potrait');
        return $pdf->stream('produk.pdf');
    }

    public function destroy(PurchaseRequisition $purchaseRequisition)
    {
       abort_if(Gate::denies('order_delete'), Response::HTTP_FORBIDDEN, '403 Forbidden');

        $purchaseRequisition->delete();
		//dd($purchaseRequisition);

        //return redirect()->route('admin.purchase-requisition.index');
    }

    public function massDestroy(MassDestroyTransactionTypeRequest $request)
    {
        TransactionType::whereIn('id', request('ids'))->delete();

        return response(null, Response::HTTP_NO_CONTENT);
    }

    public function rcv_direct(Request $request)
    {
		Grn::create();
		$grn = Grn::latest('id')->first();
        $vendor = Vendor::All();
        HPCount::create();
        $id = HPCount::latest('id')->first();
        $head = HPCount::findorNew($id->id+1);
        $po_number='2'.str_pad($id->id+1, 7, "0", STR_PAD_LEFT);

		return view('admin.rcv.supplierDirect',compact('vendor','grn','po_number'));
    }

    public function rcv_direct_store(Request $request)
    {
        try {
        \DB::beginTransaction();

            //Create Purchase Requitation
            $pr_id = PurchaseRequisition::latest('id')->first();
            $pr_head = PurchaseRequisition::findorNew($pr_id->id+1);
            $pr_head->segment1='PR'.str_pad($pr_id->id+1, 6, "0", STR_PAD_LEFT);
            $number=$pr_head->segment1;
            $pr_header_id = PurchaseRequisition::latest()->first();
            $pr_header_id = $pr_header_id->id +1;
            $pr_head =PurchaseRequisition::findorNew($request->id);
            $pr_head->req_header_id = $pr_header_id;
            $pr_head->segment1=$number;
            $pr_head->authorized_status=2;
            $pr_head->transaction_date=date('Y-m-d');
            $pr_head->created_by=$request->created_by;
            $pr_head->reference=$request->ref;
            $pr_head->updated_by=$request->updated_by;
            $pr_head->requested_by=$request->created_by;
            $pr_head->attribute1='WE2105';
            $pr_head->app_lvl=12;
            $pr_head->description='Local Material order';
            // dd($pr_head);
			$pr_head->save();

            // Create Purchase Order
            $po_header_id = PurchaseOrder::latest()->first();
            $po_head = PurchaseOrder::findorNew($request->id);
            $po_head->po_head_id = $po_header_id->id+1;
            $po_head->segment1=$request->segment1;
            $po_head->status=12;
            $po_head->agent_id=$request->agent_id;
            $po_head->organization_id=isset($request->organization_id)? $request->organization_id :182;
            $po_head->created_by=$request->created_by;
            $po_head->vendor_id=$request->vendor_id;
            $po_head->type_lookup_code=$request->type_lookup_code;
            $po_head->ship_to_location=$request->ship_to_location;
            $po_head->bill_to_location=$request->bill_to_location;
            $po_head->currency_code=$request->currency_code;
            $po_head->rate_date=$request->rate_date;
            $po_head->source=$request->source;
            // dd($head);
            $po_head->save();

            // receive
            $id = RcvHeader::latest('id')->first();
            $head =RcvHeader::findorNew($request->id);
            $head->shipment_header_id=str_pad($id->id+1, 6, "0", STR_PAD_LEFT);
            $head->vendor_id=$request->vendor_id;
            $head->vendor_site_id=$request->vendor_id;
            $head->organization_id=isset($request->organization_id)? $request->organization_id :182;
            $head->receipt_num=$request->receipt_num;
            $head->num_of_containers = $request->num_of_containers;
            $head->currency_code=$request->currency_code;
            $head->gl_date=$request->rate_date;
            $head->ship_to_location_id=$request->ship_to_location;
            $head->bill_of_lading=$request->bill_of_lading;
            $head->freight_terms=$request->freight_terms;
            $head->transaction_type="RECEIVE";
            $head->receipt_source_code=$request->type_lookup_code;
            $head->packing_slip=$request->packing_slip;
            $head->waybill_airbill_num=$request->waybill_airbill_num;
            $head->comments=$request->comments;
            $head->invoice_status_code=0;
            $head->created_by=$request->updated_by;
            $head->last_updated_by=$request->updated_by;
            // $head->gl_date=$request->gl_date;
            $head->created_at=date('Y-m-d H:i:s');
            $head->updated_at=date('Y-m-d H:i:s');
            // dd($head);
            $head->save();
            $line_number=1;
            foreach($request->inventory_item_id as $key =>$inventory_item_id){
                    $pr_data = array(
                        'header_id'=>$pr_header_id,
                        'line_id'=>$key+1 ,
                        'split_line_id'=>$key+1 ,
                        'inventory_item_id'=>$request->inventory_item_id[$key],
                        'quantity'=>$request->quantity[$key],
                        'attribute1'=>$request->description_item[$key],
                        'pr_uom_code'=>$request->pr_uom_code[$key],
                        'requested_date'=>date('Y-m-d'),
                        'estimated_cost'=>0,
                        'created_by'=>$request->created_by,
                        'updated_by'=>$request->updated_by,
                        'purchase_status'=>3,
                        'created_at'=>date('Y-m-d H:i:s'),
                        'updated_at'=>date('Y-m-d H:i:s'),
                    );
                    RequisitionDetail::create($pr_data);

                    $po_data = array(
                        'po_header_id'=>$po_head->po_head_id,
                        'line_id'=> $line_number,
                        'inventory_item_id'=>$request->inventory_item_id [$key],
                        'po_uom_code'=>$request->pr_uom_code [$key],
                        'unit_price'=>0,
                        'need_by_date'=>date('Y-m-d'),
                        'po_quantity'=>$request->quantity [$key],
                        'base_uom'=> $request->pr_uom_code [$key],
                        'base_qty'=>$request->quantity [$key],
                        'attribute2'=>'',
                        'line_type_id'=>1,
                        'line_status'=>12,
                        'quantity_receive'=>0,
                        'organization_id'=>222,
                        'tax_name'=>$request->tax_id,
                        'source_line_id'=>'',
                        'item_description'=>$request->description_item [$key],
                        'attribute1'=>$number,
                        'line_number'=>$line_number,
                        'created_by_id'=>$request->created_by,
                        'created_at'=>date('Y-m-d H:i:s'),
                        'updated_at'=>date('Y-m-d H:i:s'),
                    );
                    // dd($data);
                    PurchaseOrderDet::create($po_data);
                    $po_detail = PurchaseOrderDet::latest('id')->first();

                    //Calculation
                    $wg = $request->attribute1[$key] + $request->attribute_integer1[$key] + $request->attribute_integer3 [$key]; // Water + Gross + PROHIBITIVE
                    $tolerance = $request->attribute2[$key] + $request->attribute_integer2[$key]; // Toleraance
                    $qty_accepted = $request->quantity [$key] - ($request->quantity [$key] * ($wg - $tolerance) / 100); // Result
                    // dd($qty_accepted);

                    $data = array(
                            'po_header_id'=>$po_head->po_head_id,
							'po_line_location_id'=>$po_detail->id,
							'quantity_received'=>$request->quantity [$key],
							'po_quantity'=>$request->quantity [$key],
							'quantity_delivered'=>0,
							'quantity_returned'=>0,
							'quantity_accepted'=>$qty_accepted,
							'quantity_rejected'=>0,
                            'secondary_quantity_received'=>$request->quantity [$key],
                            'tax_name'=>$request->tax_id,
                            'secondary_uom_code'=>$request->pr_uom_code [$key],
							'shipment_unit_price'=>0,
							'po_line_id'=>$po_detail->line_id,
							'uom_code'=>$request->pr_uom_code [$key],
							'item_description'=>$request->description_item [$key],
							'item_id'=>$request->inventory_item_id [$key],
							'shipment_header_id'=> $head->shipment_header_id,
							'shipment_line_id'=>$line_number,
							'to_subinventory'=>isset($request->subinventory[$key])? $request->subinventory[$key] :'1000',
							'transfer_percentage'=>$request->transfer_percentage [$key], //BM Tolerance
							'attribute1'=>$request->attribute1[$key], //Gross
							'attribute2'=>$request->attribute2[$key], // Gros Tolerance
							'attribute_integer1'=>$request->attribute_integer1[$key], //Water
							'attribute_integer2'=>$request->attribute_integer2 [$key], //Supplier Tolerance
							'attribute_integer3'=>$request->attribute_integer3 [$key], // Prohibitive
							'created_at'=> date('Y-m-d H:i:s'),
							'updated_at'=> date('Y-m-d H:i:s'),
                    );
                    // dd($data);
                    RcvDetail::create($data);

                    /* Onhand Transaction*/
                    $onhand=Onhand::where(['inventory_item_id'=>$data['item_id'],'subinventory_code'=>$data['to_subinventory']])->first();
                    if(!$onhand){
                        $stock = array(
                            'inventory_item_id'=>$data['item_id'],
                            'subinventory_code'=>$data['to_subinventory'],
                            'primary_transaction_quantity'=>$request->quantity [$key],
                            'transaction_uom_code'=>$request->pr_uom_code [$key],
                            'created_by'=>$request->created_by,
                            'created_at'=> date('Y-m-d H:i:s'),
                            'updated_at'=> date('Y-m-d H:i:s'),
                        );
                    Onhand::create($stock);
                    }else{
                     $update_stock=	$onhand->primary_transaction_quantity+$request->quantity [$key];
                        $onhand=Onhand::where(['inventory_item_id'=>$data['item_id'],'subinventory_code'=>$data['to_subinventory']])->update(["primary_transaction_quantity"=>$update_stock]);
                    }
                    $trx = array(
                        'transaction_id'=>MaterialTxns::all()->count()+1,
                        'last_updated_by'=>$request->updated_by,
                        'created_by'=>$request->created_by,
                        'inventory_item_id'=>$data['item_id'],
                        'organization_id'=>'222',
                        'subinventory_code'=>$data['to_subinventory'],
                        'transaction_type_id'=>1,
                        'transaction_action_id'=>1,
                        'transaction_source_type_id'=>1,
                        'secondary_uom_code'=>$request->pr_uom_code [$key],
                        'secondary_transaction_quantity'=>$request->quantity [$key],
                        'transaction_source_name'=>"Purchase Order Receipt",
                        'transaction_quantity'=>$data['quantity_received'],
                        'transaction_uom'=>$data['uom_code'],
                        'primary_quantity'=>$data['quantity_received'],
                        'transaction_date'=> date('Y-m-d'),
                        'transaction_reference'=>$request->segment1,
                        'currency_code'=>DB::table('bm_po_header_all')->where('segment1',$request->segment1)->first()->currency_code,
                        'receiving_document'=>$request->packing_slip,
                        'source_line_id'=>$data['po_line_id'],
                        'attribute_category'=>$request->receipt_num,
                    );
                    // dd($trx);
                    MaterialTxns::create($trx);

                $line_number++;
            }
        \DB::commit();
        }catch (Throwable $e){
            \DB::rollback();
        }

        return redirect()->route('admin.rcv.index')->with('success', 'Receive Data  is Inputed');

    }

    public function rcv_direct_edit(Request $request)
    {
        $rcv = RcvHeader::where('receipt_num',$request->grn)->first();
        $rcv_detail =RcvDetail::where('shipment_header_id',$rcv->shipment_header_id)->get();
        $detail =RcvDetail::where('shipment_header_id',$rcv->shipment_header_id)->first();
        $vendor = Vendor::All();
        $tax =\App\Tax::where('type_tax_use','=','Purchase')->get();

		return view('admin.rcv.supplierDirectEdit',compact('rcv','rcv_detail','vendor','tax','detail'));
    }

}
