<?php

namespace App\Http\Controllers\Admin;

use App\Http\Controllers\Controller;
use App\PhysicalInventories;
use App\Subinventories;
use App\MaterialTxns;
use App\Onhand;
use Session;
use Gate;
use App\ImgPath;
use App\Imports\PhysicalInventoriesImport;
use Maatwebsite\Excel\Facades\Excel;
use Illuminate\Support\Facades\File;
use Illuminate\Http\Request;
use Symfony\Component\HttpFoundation\Response;

class PhysicalInventoryController extends Controller
{
    //
    public function index()
    {
        abort_if(Gate::denies('quotation_access'), Response::HTTP_FORBIDDEN, '403 Forbidden');
        $physic = PhysicalInventories::all();
        return view('admin.physicalInventory.index', compact('physic'));
    }

    public function create()
    {
        abort_if(Gate::denies('quotation_create'), Response::HTTP_FORBIDDEN, '403 Forbidden');

        $subInventory = Subinventories::All();
        return view('admin.physicalInventory.create', compact('subInventory'));
        //return view('admin.quotation.createPrice');
    }

    public function store(Request $request)
    {
        // dd($request->subinventory);
		try {
			\DB::beginTransaction();
            //auto id
            foreach($request->inventory_item_id as $key =>$inventory_item_id){
                if(empty($request->id[$key])){
                $id= PhysicalInventories::latest('id')->first()->physical_inventory_id ?? 0;
                $id= $id+1;
                    $data = array(
                        'physical_inventory_id'=>$id,
                        'inventory_item_id'=>$request->inventory_item_id [$key],
                        'tag_quantity'=>$request->tag_quantity [$key],
                        'tag_uom'=>$request->tag_uom [$key],
                        'subinventory'=>$request->subinventory [$key],
                        'locator_id'=>$request->locator_id [$key],
                        'revision'=>$request->revision[$key],
                        'attribute_date1'=>$request->gl_date,
                        'created_by'=>$request->created_by,
                        'tag_id'=>1,
                        'created_at'=>date('Y-m-d H:i:s'),
                        'updated_at'=>date('Y-m-d H:i:s'),
                        );
                        PhysicalInventories::create($data);

                    }

                }
			\DB::commit();
			}catch (Throwable $e){
				\DB::rollback();
			}
       return  redirect()->route('admin.physic.index')->with('success', 'Physical Inventory Successfull Inputed');
    }

    public function edit($id)
    {
        abort_if(Gate::denies('order_edit'), Response::HTTP_FORBIDDEN, '403 Forbidden');
        $physic = PhysicalInventories::find($id);
        $sub = Subinventories::All();
        return view('admin.physicalInventory.edit', compact('physic','sub'));
    }

    public function update(Request $request)
    {

        try {
            \DB::beginTransaction();
            //auto id
            foreach($request->inventory_item_id as $key =>$inventory_item_id){
                // dd("masuk");
                if(empty($request->id[$key])){
                    $id= PhysicalInventories::latest('id')->first()->physical_inventory_id+1;
                    // dd($id);
                        $data = array(
                            'physical_inventory_id'=>$id,
                            'inventory_item_id'=>$request->inventory_item_id [$key],
                            'tag_quantity'=>$request->tag_quantity [$key],
                            'tag_uom'=>$request->tag_uom [$key],
                            'subinventory'=>$request->subinventory [$key],
                            'locator_id'=>$request->locator_id [$key],
                            'revision'=>$request->revision[$key],
                            'created_by'=>$request->created_by,
                            'tag_id'=>1,
                            'created_at'=>date('Y-m-d H:i:s'),
                            'updated_at'=>date('Y-m-d H:i:s'),
                            );
                            PhysicalInventories::create($data);
                }else{
                    $data =PhysicalInventories::find($request->id[$key]);
                    // dd($data);
                    $data->physical_inventory_id = $request->physical_inventory_id[$key];
                    $data->inventory_item_id = $request->inventory_item_id[$key];
                    $data->tag_quantity = $request->tag_quantity[$key];
                    $data->subinventory = $request->subinventory[$key];
                    $data->locator_id = $request->locator_id[$key];
                    $data->revision = $request->revision[$key];
                    $data->tag_id = 1;
                    $data->created_by = $request->created_by;
                    $data->updated_at = date('Y-m-d H:i:s');
                    $data->save();

                }


            }
            \DB::commit();
            }catch (Throwable $e){
                \DB::rollback();
            }
        return  redirect()->route('admin.physic.index')->with('success', 'Physical Inventory Successfull Edited');
    }


    public function autoApply(Request $request)
    {
        // dd("masuk");
        try {
            \DB::beginTransaction();
            foreach($request->lines as $key =>$head){
                $physic = PhysicalInventories::find($request->lines[$key]);
                if ($physic->tag_id  ==2){
                    return back()->with('error','Data already Applied');
                }

                $physic->physical_inventory_id = $physic->physical_inventory_id;
                $physic->inventory_item_id = $physic->inventory_item_id;
                $physic->tag_quantity = $physic->tag_quantity;
                $physic->subinventory = $physic->subinventory;
                $physic->locator_id = $physic->locator_id;
                $physic->revision = $physic->revision;
                $physic->created_by = $physic->created_by;
                $physic->tag_id = 2;
                $physic->updated_at = date('Y-m-d H:i:s');
                // dd($physic);
                $physic->save();

                $onhand=Onhand::where(['inventory_item_id'=>$physic->inventory_item_id,'subinventory_code'=>$physic->subinventory])->first();


                $onhan_qty = $onhand->primary_transaction_quantity ?? 0;
                $qty_transacation =  $physic->tag_quantity - $onhan_qty;

                if( $physic->tag_quantity < $onhan_qty){
                    // $qty_transacation =   $onhand->primary_transaction_quantity - $physic->tag_quantity ;
                    $transacation_id = 31;
                    $transacation_name = 'Miscellaneous issue';
                }else{
                    $transacation_id = 32;
                    $transacation_name = 'Miscellaneous receipt';
                }

                $trx = array(
                    'transaction_id'=>MaterialTxns::all()->count()+1,
                    'last_updated_by'=>auth()->user()->id,
                    'created_by'=>auth()->user()->id,
                    'inventory_item_id'=>$physic->inventory_item_id,
                    'organization_id'=>'222',
                    'subinventory_code'=>$physic->subinventory,
                    'transfer_subinventory'=>$physic->subinvto ?? '',
                    'transaction_type_id'=>$transacation_id,
                    'transaction_action_id'=>$transacation_id,
                    'transaction_source_type_id'=>$transacation_id,
                    'transaction_source_name'=>$transacation_name,
                    'transaction_quantity'=>$qty_transacation,
                    'transaction_uom'=>$physic->tag_uom,
                    'primary_quantity'=>$qty_transacation,
                    'transaction_date'=>date('d-M-Y H:i:s'),
                    'transaction_reference'=>$physic->physical_inventory_id,
                    //   'currency_code'=>DB::table('bm_po_header_all')->where('segment1',$physic->segment1)->first()->currency_code,
                    'receiving_document'=>$physic->reference ?? '',
                    'source_line_id'=>"",
                    'attribute_category'=>$physic->reference ?? '',
                );
                MaterialTxns::create($trx);


                if(!$onhand){
                    $stock = array(
                                'inventory_item_id'=>$physic->inventory_item_id,
                                'subinventory_code'=>$physic->subinventory,
                                'primary_transaction_quantity'=>$physic->tag_quantity,
                                'transaction_uom_code'=>$physic->tag_uom,
                                'created_by'=>auth()->user()->id,
                                'created_at'=> date('Y-m-d H:i:s'),
                                'updated_at'=> date('Y-m-d H:i:s'),
                    );
                Onhand::create($stock);
                }else{
                    $onhand=Onhand::where(['inventory_item_id'=>$physic->inventory_item_id,'subinventory_code'=>$physic->subinventory])->update(["primary_transaction_quantity"=>$physic->tag_quantity],["updated_at"=>date('Y-m-d H:i:s')]);
                    // dd($onhand);
                }


            }
        \DB::commit();
        }catch (Throwable $e){
            \DB::rollback();
        }
        return  redirect()->route('admin.physic.index')->with('success', 'Physical Inventory Successfull Edited');
    }

    public function importExcel(Request $request)
    {
        $message = [
            'mimes' => 'Format Required .xls/.xlsx/.csv',
        ];

        // validasi
		$this->validate($request, [
			'file' => 'required|mimes:csv,xls,xlsx'
        ],$message);

		// menangkap file excel
		$file = $request->file('file');

		// membuat nama file unik
		$nama_file = rand().$file->getClientOriginalName();

		$file->move('excel',$nama_file);

		// import data
		Excel::import(new PhysicalInventoriesImport, public_path('/excel/'.$nama_file));

        File::delete('excel/'.$nama_file);

		return redirect()->route('admin.physic.index')->with('success', 'Physical Inventory Successfull Imported');
    }

    public function show(quotation $quotation)
    {
        abort_if(Gate::denies('order_show'), Response::HTTP_FORBIDDEN, '403 Forbidden');

        $quotationDetail = quotationDetail::All();
        $ItemMaster = ItemMaster::All();
        $vendor = Vendor::all();
        return view('admin.physicalInventory.show', compact('quotation','vendor','quotationDetail','ItemMaster'));
    }

    public function destroy($id)
    {
        abort_if(Gate::denies('order_delete'), Response::HTTP_FORBIDDEN, '403 Forbidden');

        $data =PhysicalInventories::find($id);
        $data->delete();
        return back();
    }

    public function massDestroy(MassDestroyOrderRequest $request)
    {
        Order::whereIn('id', request('ids'))->delete();

        return response(null, Response::HTTP_NO_CONTENT);
    }
}
